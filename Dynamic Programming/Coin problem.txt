/*
* We first focus on a problem that we have already seen in Chapter 6: Given a set
* of coin values coins = { c 1 , c 2 , . . . , c k } and a target sum of money n , our task is to
* form the sum n using as few coins as possible.
* In Chapter 6, we solved the problem using a greedy algorithm that always
* chooses the largest possible coin. The greedy algorithm works, for example, when
* the coins are the euro coins, but in the general case the greedy algorithm does
* not necessarily produce an optimal solution.
 * Let solve(x) denote the minimum number of coins required for a sum x.
 * The values of the fuction depend on the values of the coins. For example, if 
 * coins = {1,3,4}, the first values of the fuction are as follows:
 *
 * solve(0) = 0
 * solve(1) = 1
 * solve(2) = 2
 * solve(3) = 1
 * solve(4) = 1
 * solve(5) = 2
 * solve(6) = 2
 * solve(7) = 2
 * solve(8) = 2
 * solve(9) = 3
 * solve(10) = 3
 *
 * For example, solve(10) = 3, because at least 3 coins are needed to form the 
 * sum 10. The optimal solution is 3 + 3 + 4 = 10
 *
 * The essential property of solve is that its values can be recursively calculated
 * from its smaller values. The idea is to fucus on the first coin that we choose
 * for the sum. For example, in the about scenario, the first coin cna be either 
 * 1,3 or 4. If we first chooose coin 1, the remaining task is to from the sum 9
 * using the minimum number of coins, which is a subproblem of the original problem
 * Of corse, the same applies to coins 3 and 4. Thus, we can use the following
 * recursive fromula to calculate the minimum number of coins:
 * 
 * solve(x) = min(solve(x - 1) +1, solve(x - 3) + 1, solve(x - 4) + 1)
 *
 * The base case of the recursion is solve(0) = 0, because no coins are needed to
 * form an empty sum. For example, 
 *
 * solve(10) = solve(7) + 1 = solve(4) + 2 = solve(0) + 3 = 3
 *
 * Now we are ready to give a genral recursive fuction that calculates the 
 * minimum number of coins needed to form a sum x:
 *
 * solve(x) = { INF, X < 0
 *              0, X = 0
 *              min c have in coins solve(x - c) + 1, x > 0
 * 	      }
 *
 * First, if x < 0, the value is INF, because it is impossible to form a negative
 * sum of money. Then, if x = 0, the value is 0, because no coins are needed to
 * form an empty sum. Finally, if x > 0, the variable c goes through all possible
 * how to choose the first coin of the sum.
 * */
